<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>关于Joomla的应用与部署</title>
      <link href="/2021/04/15/about-joomla/"/>
      <content type="html"><![CDATA[<h2 id="Ubuntu-20-04-和-php-的相关准备"><a href="#Ubuntu-20-04-和-php-的相关准备" class="headerlink" title="Ubuntu 20.04 和 php 的相关准备"></a>Ubuntu 20.04 和 php 的相关准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-pgsql</span><br><span class="line">sudo apt install php-mysql</span><br></pre></td></tr></table></figure><h2 id="处理-www-data-的权限"><a href="#处理-www-data-的权限" class="headerlink" title="处理 www-data 的权限"></a>处理 www-data 的权限</h2><p>建立<code>www</code>文件夹，比如<code>/home/xxx/www</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R xxx.www-data /home/xxx/www</span><br><span class="line"><span class="built_in">cd</span> /home/xxx/www</span><br><span class="line">find . -<span class="built_in">type</span> d -<span class="built_in">exec</span> chmod 2775 &#123;&#125; \;</span><br><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 0664 &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="修改-apache-配置，加主文件夹操作权限"><a href="#修改-apache-配置，加主文件夹操作权限" class="headerlink" title="修改 apache 配置，加主文件夹操作权限"></a>修改 apache 配置，加主文件夹操作权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">home</span>/<span class="attr">yangxc</span>/<span class="attr">www</span>/<span class="attr">crca</span>&quot;&gt;</span></span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ubuntu </tag>
            
            <tag> joomla </tag>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MAC多个网络配置</title>
      <link href="/2021/03/01/about-mac-networks/"/>
      <content type="html"><![CDATA[<p>MAC总共连了三个网络：</p><ul><li>USB+iPhone热点共享；</li><li>Wifi接测试环境网络；</li><li>网线接开发环境网络。</li></ul><p>首先把三个网络都接上，在网络管理里调整顺序，把iPhone USB放到第一个。<br>然后删除默认网关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route -n delete 0.0.0.0</span><br></pre></td></tr></table></figure><p>设置默认网关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route -n add 0.0.0.0 172.20.10.1</span><br></pre></td></tr></table></figure><p>然后拔掉iPhone，再设置下一个路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route -n add 172.16.13.0/16 172.16.8.1</span><br></pre></td></tr></table></figure><p>再断开这个网络，设置下一个路由：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo route -n add 192.168.0.0/24 192.168.0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> MAC </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记点关于vim的东西</title>
      <link href="/2021/01/23/about-vim/"/>
      <content type="html"><![CDATA[<h2 id="普通操作"><a href="#普通操作" class="headerlink" title="普通操作"></a>普通操作</h2><ul><li>cc 删除当前行，光标不动，进入插入模式</li><li>h j k l 左 下 上 右</li><li>w 下个单词头</li><li>e 本单词尾</li><li>b 本单词头</li><li>u undo</li><li>^r redo</li><li>{ 下段首</li><li>} 本段首</li><li>_ 行首</li><li>$ 行尾</li><li>gg 顶部</li><li>o 新建一行</li><li>C 删除光标后面的，并进入插入模式</li><li>v 可视选择</li><li>V 行可视选择</li><li>gh 选择模式，可以直接被覆盖<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2></li><li>:e filename</li><li>:ls 列出当前打开的文件</li><li>:b1 :b2  切换到第几个文件</li><li>:b name 模糊匹配，切换文件</li><li>:b name tab循环</li><li>:Ex 浏览文件夹</li><li>在:Ex下 D 删除</li><li>在:Ex下 R 重命名</li><li>在:Ex下 - 上级目录<h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2></li><li>:sp [filename]</li><li>:vs [filename]</li><li>^w,q 关闭当前窗口</li><li>^wh ^wj ^wk ^wl 跳转窗口</li><li>^w,H ^w,J ^w,K ^w,L 移动窗口</li><li>:newtab 新建标签页</li><li>:gt :gT 切换标签页</li><li>:tabmove N 移到位置N<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2></li><li>set hlsearch 高亮所有关键字</li><li>:noh 清除高亮</li><li>s/<find-this>/<replace-with-this>/<flags> g 全局，c 确认， i 忽略大小写，I 区分大小写，e 没有匹配时不显示错误</li><li>/&lt;word&gt; 整词匹配<h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2></li><li>y[x] 复制</li><li>yw 复制一个词</li><li>ye 复制到行尾</li><li>p 粘贴</li><li>“* 系统粘贴板</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于windows的一些坑</title>
      <link href="/2021/01/19/about-windows/"/>
      <content type="html"><![CDATA[<h2 id="powershell执行脚本的权限"><a href="#powershell执行脚本的权限" class="headerlink" title="powershell执行脚本的权限"></a>powershell执行脚本的权限</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于windows下编译zlib和libzip</title>
      <link href="/2021/01/12/about-zlib-libzip/"/>
      <content type="html"><![CDATA[<h2 id="1-先安装cmake"><a href="#1-先安装cmake" class="headerlink" title="1. 先安装cmake"></a>1. 先安装cmake</h2><p>一路默认</p><h2 id="2-再编译zlib"><a href="#2-再编译zlib" class="headerlink" title="2. 再编译zlib"></a>2. 再编译zlib</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. <span class="literal">-G</span><span class="string">&quot;Visual Studio 16 2019&quot;</span> <span class="literal">-A</span><span class="string">&quot;Win32&quot;</span> <span class="literal">-DCMAKE_PREFIX_PATH</span>=<span class="string">&quot;C:/Users/singl/Codes/zip&quot;</span></span><br></pre></td></tr></table></figure><p>去vs的命令行下编译</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msbuild /P:<span class="keyword">Configuration</span>=<span class="keyword">Release</span> INSTALL.vcxproj</span><br></pre></td></tr></table></figure><h2 id="3-再编译libzip"><a href="#3-再编译libzip" class="headerlink" title="3. 再编译libzip"></a>3. 再编译libzip</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. <span class="literal">-G</span><span class="string">&quot;Visual Studio 16 2019&quot;</span> <span class="literal">-A</span><span class="string">&quot;Win32&quot;</span> <span class="literal">-DCMAKE_PREFIX_PATH</span>=<span class="string">&quot;C:/Users/singl/Codes/libzip&quot;</span> <span class="literal">-DZLIB_LIBRARY</span>=<span class="string">&quot;C:/Users/singl/Codes/zlib/lib/zlib.lib&quot;</span> <span class="literal">-DZLIB_INCLUDE_DIR</span>=<span class="string">&quot;C:/Users/singl/Codes/zlib/include&quot;</span></span><br></pre></td></tr></table></figure><p>去vs的命令行下编译</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msbuild /P:<span class="keyword">Configuration</span>=<span class="keyword">Release</span> INSTALL.vcxproj</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> zlib </tag>
            
            <tag> libzip </tag>
            
            <tag> build </tag>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记点Linux的东西</title>
      <link href="/2020/12/24/about-linux/"/>
      <content type="html"><![CDATA[<h2 id="制作deb包"><a href="#制作deb包" class="headerlink" title="制作deb包"></a>制作deb包</h2><p>文件夹结构如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--+--root_path</span><br><span class="line">  <span class="string">|</span></span><br><span class="line">  +--etc/xxx/config</span><br><span class="line">  <span class="string">|</span></span><br><span class="line">  +--opt/xxx/exe</span><br><span class="line">  <span class="string">|</span></span><br><span class="line">  +--var/<span class="built_in">log</span>/xxx</span><br><span class="line">  <span class="string">|</span></span><br><span class="line">  +--+--DEBIAN</span><br><span class="line">     <span class="string">|</span></span><br><span class="line">     +--control</span><br><span class="line">     <span class="string">|</span></span><br><span class="line">     +--postinst</span><br></pre></td></tr></table></figure><p>control文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Package: xxxxx</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Section: system</span><br><span class="line">Architecture: amd64</span><br><span class="line">Description: xxxxx</span><br><span class="line">Maintainer: xxxx</span><br></pre></td></tr></table></figure><p>postinst需要+x属性，会在安装后被执行，可以用来改用户，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown root.root /opt/xxx</span><br><span class="line">chown root.root /etc/xxx</span><br><span class="line">chown root.root /var/<span class="built_in">log</span>/xxx</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="Ubuntu通过systemd制作service"><a href="#Ubuntu通过systemd制作service" class="headerlink" title="Ubuntu通过systemd制作service"></a>Ubuntu通过systemd制作service</h2><p><code>/lib/systemd/system/xxx.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=xxx</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root  <span class="comment"># 使用合适的用户</span></span><br><span class="line">Group=root  <span class="comment"># 使用合适的组</span></span><br><span class="line">ExecStart=/opt/xxx/xxxx</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> <span class="variable">$MAINPID</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -SIGHUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -SIGINT <span class="variable">$MAINPID</span></span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target  <span class="comment"># 还不太懂这个</span></span><br></pre></td></tr></table></figure><p>关键是，要reload一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> systemd </tag>
            
            <tag> service </tag>
            
            <tag> deb </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS播放声音的折腾</title>
      <link href="/2020/12/09/about-centos-audio/"/>
      <content type="html"><![CDATA[<p>查看是否有声卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/asound/cards</span><br></pre></td></tr></table></figure><p>下面这个命令也是查声卡的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo aplay -L</span><br></pre></td></tr></table></figure><p>还有这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ll /dev/snd/</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/asound.conf</span><br><span class="line"></span><br><span class="line">defaults.pcm.card 1  </span><br><span class="line">defaults.pcm.device 0  </span><br><span class="line">defaults.ctl.card 1</span><br></pre></td></tr></table></figure><p>调节音量，用方向键移动并调节音量，然后按m键启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo alsamixer</span><br></pre></td></tr></table></figure><p><img src="/images/alsamixer.png" alt="alsamixer" title="alsamixer"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Gitlab的一点记录</title>
      <link href="/2020/12/07/about-gitlab/"/>
      <content type="html"><![CDATA[<h2 id="挪窝"><a href="#挪窝" class="headerlink" title="挪窝"></a>挪窝</h2><p>当时Gitlab是部署着玩儿的，不懂怎么配置也没去研究，结果一用下来里面好多东西，必须得整理一下，首先是挪个窝，否则会一直安装在系统盘，没多久就满了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /home/gitlab</span><br><span class="line">$ sudo mkdir /home/gitlab/git-data</span><br><span class="line">$ sudo chown git.root /home/gitlab/git-data</span><br><span class="line">$ sudo su - git</span><br><span class="line">$ vi /etc/gitlab/gitlab.rb</span><br><span class="line">git_data_dirs(&#123;</span><br><span class="line">  <span class="string">&quot;default&quot;</span> =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot;/home/gitlab/git-data&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">&quot;alternative&quot;</span> =&gt; &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span> =&gt; <span class="string">&quot; /home/gitlab2/gitlab-data&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$ gitlab-ctl stop</span><br><span class="line">$ rsync -av /var/opt/gitlab/git-data/repositories /home/data/gitlab/git-data</span><br><span class="line">$ gitlab-ctl reconfigure </span><br><span class="line">$ gitlab-ctl start</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于PostgreSQL</title>
      <link href="/2020/12/06/about-postgresql/"/>
      <content type="html"><![CDATA[<h1 id="CentOS安装配置PostgreSQL"><a href="#CentOS安装配置PostgreSQL" class="headerlink" title="CentOS安装配置PostgreSQL"></a>CentOS安装配置PostgreSQL</h1><h2 id="1-下载离线包并安装"><a href="#1-下载离线包并安装" class="headerlink" title="1. 下载离线包并安装"></a>1. 下载离线包并安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://download.postgresql.org/pub/repos/yum/13/redhat/rhel-8.2-x86_64/</span><br><span class="line"></span><br><span class="line">postgresql13-13.1-1PGDG.rhel8.x86_64.rpm</span><br><span class="line">postgresql13-contrib-13.1-1PGDG.rhel8.x86_64.rpm</span><br><span class="line">postgresql13-devel-13.1-1PGDG.rhel8.x86_64.rpm</span><br><span class="line">postgresql13-libs-13.1-1PGDG.rhel8.x86_64.rpm</span><br><span class="line">postgresql13-server-13.1-1PGDG.rhel8.x86_64.rpm</span><br></pre></td></tr></table></figure><p>依次安装。</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /usr/pgsql-13/bin/postgresql-13-setup initdb</span><br></pre></td></tr></table></figure><p>主要配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls  /var/lib/pgsql/13/data/</span><br></pre></td></tr></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><p>修改默认账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su - postgres </span><br><span class="line">$ psql -c <span class="string">&quot;alter user postgres with password &#x27;newpassword&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>启用远程连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /var/lib/pgsql/13/data/postgresql.conf</span><br><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /var/lib/pgsql/13/data/pg_hba.conf</span><br><span class="line">host all all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure><h3 id="设置自动启动"><a href="#设置自动启动" class="headerlink" title="设置自动启动"></a>设置自动启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> --now postgresql-13</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart postgresql-13</span><br></pre></td></tr></table></figure><h2 id="3-连接"><a href="#3-连接" class="headerlink" title="3. 连接"></a>3. 连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ psql -U &lt;dbuser&gt; -h &lt;serverip&gt; -p 5432 &lt;dbname&gt;</span><br></pre></td></tr></table></figure><h2 id="4-数据库操作"><a href="#4-数据库操作" class="headerlink" title="4. 数据库操作"></a>4. 数据库操作</h2><p>创建数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database xxx;</span><br></pre></td></tr></table></figure><p>查看数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure><p>查看表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d table;</span><br></pre></td></tr></table></figure><p>切换数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c db</span><br></pre></td></tr></table></figure><p>修改所有者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database xxx owner to xxx;</span><br></pre></td></tr></table></figure><h3 id="5、用户操作"><a href="#5、用户操作" class="headerlink" title="5、用户操作"></a>5、用户操作</h3><p>创建用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user xxx;</span><br></pre></td></tr></table></figure><p>赋权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on database xxx to xxx;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS下firewall操作指令</title>
      <link href="/2020/12/06/CentOS-firewall/"/>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --query-port=8080/tcp <span class="comment"># 查询端口是否开放</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --add-port=80/tcp --permanent <span class="comment">#永久添加80端口例外(全局)</span></span><br><span class="line">sudo firewall-cmd --remove-port=80/tcp --permanent <span class="comment">#永久删除80端口例外(全局)</span></span><br><span class="line">sudo firewall-cmd --add-port=65001-65010/tcp --permanent <span class="comment">#永久增加65001-65010例外(全局)</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent <span class="comment">#永久添加80端口例外(区域public)</span></span><br><span class="line">sudo firewall-cmd --zone=public --remove-port=80/tcp --permanent <span class="comment">#永久删除80端口例外(区域public)</span></span><br><span class="line">sudo firewall-cmd --zone=public --add-port=65001-65010/tcp --permanent <span class="comment">#永久增加65001-65010例外(区域public)</span></span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload <span class="comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于安卓的一些记录</title>
      <link href="/2020/07/16/about-android/"/>
      <content type="html"><![CDATA[<h2 id="关于签名文件"><a href="#关于签名文件" class="headerlink" title="关于签名文件"></a>关于签名文件</h2><h3 id="1-创建签名文件"><a href="#1-创建签名文件" class="headerlink" title="1. 创建签名文件"></a>1. 创建签名文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> &lt;<span class="built_in">alias</span>&gt; -keyalg RSA -validity &lt;20000&gt; -keystore &lt;xxx.keystore&gt;</span><br></pre></td></tr></table></figure><ul><li>alias: 别名</li><li>keyalg: 算法</li><li>validity: 有效天数</li><li>keystore: 文件名<h3 id="2-修改密码"><a href="#2-修改密码" class="headerlink" title="2. 修改密码"></a>2. 修改密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -storepasswd -keystore &lt;xxx.keystore&gt;</span><br><span class="line">keytool -keypasswd -<span class="built_in">alias</span> &lt;<span class="built_in">alias</span>&gt; -keystore &lt;xxx.keystore&gt;</span><br></pre></td></tr></table></figure><h3 id="3-查看签名信息-MD5"><a href="#3-查看签名信息-MD5" class="headerlink" title="3. 查看签名信息/MD5"></a>3. 查看签名信息/MD5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore &lt;xxx.keystore&gt;</span><br><span class="line">keytool -list -v -keystore &lt;xxx.keystore&gt; -storepass &lt;password&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> 签名 </tag>
            
            <tag> Android </tag>
            
            <tag> Sign </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记点mysql的东西</title>
      <link href="/2020/05/04/about-mysql/"/>
      <content type="html"><![CDATA[<h2 id="CentOS7上安装mysql8"><a href="#CentOS7上安装mysql8" class="headerlink" title="CentOS7上安装mysql8"></a>CentOS7上安装mysql8</h2><p>先在官网下载个repo，安装repo，然后更新一下yum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure><p>查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure><p>保证8是enable状态，可以修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line"></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql80-community</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>装完后启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld.service</span><br><span class="line">sudo systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>去日志里看root的密码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span></span><br></pre></td></tr></table></figure><p>用这个密码登录，操作之前先改一下密码，这时候密码策略还是复杂的，要改个长一点的。完了再改一下密码策略，然后就可以改简单密码了，平时测试用嘛，要那么复杂干嘛。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> root@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;xxSS@@322434&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>记一要配置下字符集</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在mac上使用openldap</title>
      <link href="/2020/04/04/openldap-on-mac/"/>
      <content type="html"><![CDATA[<p>几个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/openldap</span><br><span class="line">var/db/openldap/openldap-data</span><br></pre></td></tr></table></figure><p>修改<code>/etc/openldap/ldap.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BASE dc=yangxc,dc=com</span><br><span class="line">URI ldap://127.0.0.1:389</span><br></pre></td></tr></table></figure><p>生成密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slappasswd -s 123456</span><br><span class="line">&#123;SSHA&#125;rpF1AqHFkpP9KdDjclUmFhsy951st6kb</span><br></pre></td></tr></table></figure><p>修改<code>/etc/openldap/sldap.conf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">include         /private/etc/openldap/schema/core.schema</span><br><span class="line">include         /private/etc/openldap/schema/cosine.schema</span><br><span class="line">include         /private/etc/openldap/schema/nis.schema</span><br><span class="line">include         /private/etc/openldap/schema/inetorgperson.schema</span><br><span class="line"></span><br><span class="line">modulepath /usr/libexec/openldap</span><br><span class="line">moduleload back_bdb.la</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">suffix          <span class="string">&quot;dc=yangxc,dc=com&quot;</span></span><br><span class="line">rootdn          <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span></span><br><span class="line">rootpw          &#123;SSHA&#125;rpF1AqHFkpP9KdDjclUmFhsy951st6kb</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/libexec/slapd -d3</span><br></pre></td></tr></table></figure><p>新建第一个ou，domain.ldif：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dn: dc=yangxc,dc=com</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: domain</span><br><span class="line">dc: yangxc</span><br></pre></td></tr></table></figure><p>执行ldapadd添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x -f domain.ldif</span><br></pre></td></tr></table></figure><p>再建些个子ou，unit.ldif：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dn: ou=Manage,dc=yangxc,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Manage</span><br><span class="line"></span><br><span class="line">dn: ou=Dev,dc=yangxc,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Dev</span><br><span class="line"></span><br><span class="line">dn: ou=Tech,dc=yangxc,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: Tech</span><br><span class="line"></span><br><span class="line">dn: ou=General,dc=yangxc,dc=com</span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line">ou: General</span><br></pre></td></tr></table></figure><p>执行ldapadd添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x -f unit.ldif</span><br></pre></td></tr></table></figure><p>下面添加用户，user.ldif：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dn: uid=test1,ou=Dev,dc=yangxc,dc=com</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">homeDirectory: /home/test1</span><br><span class="line">userPassword: 123456</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">cn: test1</span><br><span class="line">uidNumber: 1001</span><br><span class="line">gidNumber: 1010</span><br><span class="line">sn: Test1</span><br><span class="line">mail: @yangxc.com</span><br><span class="line">postalAddress: beijing</span><br><span class="line">mobile: 13888888888</span><br><span class="line"></span><br><span class="line">dn: uid=test2,ou=Manage,dc=yangxc,dc=com</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">homeDirectory: /home/test2</span><br><span class="line">userPassword: 123456</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">cn: test2</span><br><span class="line">uidNumber: 1002</span><br><span class="line">gidNumber: 1011</span><br><span class="line">sn: Test2</span><br><span class="line">mail: @yangxc.com</span><br><span class="line">postalAddress: beijing</span><br><span class="line">mobile: 13999999999</span><br></pre></td></tr></table></figure><p>执行ldapadd添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapadd -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x -f user.ldif</span><br></pre></td></tr></table></figure><p>几个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -LLL</span><br><span class="line">ldapsearch -x -b <span class="string">&quot;ou=Manage,dc=yangxc,dc=com&quot;</span></span><br><span class="line">ldapadd -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x -f something.ldif</span><br><span class="line">ldapmodify -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x -f modify.ldif</span><br><span class="line">ldapdelete -D <span class="string">&quot;cn=admin,dc=yangxc,dc=com&quot;</span> -W -x <span class="string">&quot;ou=General,dc=yangxc,dc=com&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> ldap </tag>
            
            <tag> openldap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs使用笔记</title>
      <link href="/2020/04/02/about-node/"/>
      <content type="html"><![CDATA[<p>查看当前源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><p>切换阿里源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><p>Linux下升级node版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install n -g</span><br><span class="line">n stable</span><br><span class="line">n latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> nodejs </tag>
            
            <tag> 阿里源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git使用笔记</title>
      <link href="/2020/04/02/about-git/"/>
      <content type="html"><![CDATA[<p>命令行下不显示中文的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> LESSCHARSET=utf-8</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>记住密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chromium学习笔记：程序启动入口分析（Windows）</title>
      <link href="/2019/04/01/chromium-startup/"/>
      <content type="html"><![CDATA[<p>以下笔记内容均为Windows版本。</p><p>本篇笔记跟踪记录了Chromium的启动过程，主要关注 <code>Browser</code> 进程和 <code>Renderer</code> 进程。根据 <code>Chromium</code> 项目的分层设计，我们把 <code>Content API</code> 称作为 <code>Content</code> 层，而把调用 <code>Content API</code> 实现浏览器程序的部分称作为 <code>Embedder</code> 层。在项目中，<code>Embedder</code> 层有 <code>chrome</code>、<code>content_shell</code> 等多种实现。</p><h2 id="1、main-函数"><a href="#1、main-函数" class="headerlink" title="1、main() 函数"></a>1、main() 函数</h2><p>Chromium的main函数在 <code>chrome\app\chrome_exe_main_win.cc</code>，具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome\app\chrome_exe_main_win.cc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(WIN_CONSOLE_APP)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(HINSTANCE instance, HINSTANCE prev, <span class="keyword">wchar_t</span>*, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  HINSTANCE instance = GetModuleHandle(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  install_static::InitializeFromPrimaryModule();</span><br><span class="line">  SignalInitializeCrashReporting();</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Load and launch the chrome dll. *Everything* happens inside.</span></span><br><span class="line">  VLOG(<span class="number">1</span>) &lt;&lt; <span class="string">&quot;About to load main DLL.&quot;</span>;</span><br><span class="line">  MainDllLoader* loader = MakeMainDllLoader();</span><br><span class="line">  <span class="keyword">int</span> rc = loader-&gt;Launch(instance, exe_entry_point_ticks);</span><br><span class="line">  loader-&gt;RelaunchChromeBrowserWithNewCommandLineIfNeeded();</span><br><span class="line">  <span class="keyword">delete</span> loader;</span><br><span class="line">  <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数中，最重要的一步，就是 <code>int rc = loader-&gt;Launch(instance, exe_entry_point_ticks);</code> 载入 <code>chrome.dll运行</code>。</p><h2 id="2、载入-chrome-dll"><a href="#2、载入-chrome-dll" class="headerlink" title="2、载入 chrome.dll"></a>2、载入 chrome.dll</h2><p>在这里首先调用了 <code>MakeMainDllLoader()</code> 函数，这是一个静态函数，在<code>chrome\app\main_dll_loader.cc</code> 中，内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome\app\main_dll_loader.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function">MainDllLoader* <span class="title">MakeMainDllLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(GOOGLE_CHROME_BUILD)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ChromeDllLoader();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ChromiumDllLoader();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数创建并返回一个 <code>ChromiumDllLoader</code>，紧接着再调用它的 <code>Launch</code> 函数，内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome\app\main_dll_loader.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MainDllLoader::Launch</span><span class="params">(HINSTANCE instance,</span></span></span><br><span class="line"><span class="function"><span class="params">                          base::TimeTicks exe_entry_point_ticks)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> base::CommandLine&amp; cmd_line = *base::CommandLine::ForCurrentProcess();</span><br><span class="line">  process_type_ = cmd_line.GetSwitchValueASCII(switches::kProcessType);</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  dll_ = Load(&amp;file);</span><br><span class="line">  <span class="keyword">if</span> (!dll_)</span><br><span class="line">    <span class="keyword">return</span> chrome::RESULT_CODE_MISSING_DATA;</span><br><span class="line"></span><br><span class="line">  OnBeforeLaunch(cmd_line, process_type_, file);</span><br><span class="line">  DLL_MAIN chrome_main =</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;DLL_MAIN&gt;(::GetProcAddress(dll_, <span class="string">&quot;ChromeMain&quot;</span>));</span><br><span class="line">  <span class="keyword">int</span> rc = chrome_main(instance, &amp;sandbox_info,</span><br><span class="line">                       exe_entry_point_ticks.ToInternalValue());</span><br><span class="line">  OnBeforeExit(file);</span><br><span class="line">  <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里完成了 <code>chrome.dll</code> 的载入，并且执行里面的 <code>ChromeMain</code> 函数。</p><h2 id="3、ChromeMain-函数"><a href="#3、ChromeMain-函数" class="headerlink" title="3、ChromeMain() 函数"></a>3、ChromeMain() 函数</h2><p><code>ChromeMain</code> 函数负责 <code>Embedder</code> 层的实现类创建，并传递给 <code>Content</code> 层，定义在 <code>chrome\app\chrome_main.cc</code> 中，内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chrome\app\chrome_main.cc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">int</span> __cdecl <span class="title">ChromeMain</span><span class="params">(HINSTANCE instance,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 sandbox::SandboxInterfaceInfo* sandbox_info,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int64_t</span> exe_entry_point_ticks)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line"><span class="function">DLLEXPORT <span class="keyword">int</span> __cdecl <span class="title">ChromeMain</span><span class="params">(HINSTANCE instance,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 sandbox::SandboxInterfaceInfo* sandbox_info,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int64_t</span> exe_entry_point_ticks)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(OS_POSIX)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChromeMain</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int64_t</span> exe_entry_point_ticks = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line">  install_static::InitializeFromPrimaryModule();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function">ChromeMainDelegate <span class="title">chrome_main_delegate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      base::TimeTicks::FromInternalValue(exe_entry_point_ticks))</span></span>;</span><br><span class="line">  <span class="function">content::ContentMainParams <span class="title">params</span><span class="params">(&amp;chrome_main_delegate)</span></span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> rv = content::ContentMain(params);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ChromeMain中，最终执行到了 <code>content::ContentMain</code> 这个函数。</p><h2 id="4、content-ContentMain-函数"><a href="#4、content-ContentMain-函数" class="headerlink" title="4、content::ContentMain() 函数"></a>4、content::ContentMain() 函数</h2><p>代码执行到这里，进入了 <code>Content</code> 层，并且传入参数 <code>content::ContentMainParams</code> 类型的参数 <code>params</code>，它是由 <code>Embedder</code> 层传递过来的重要参数，里面包含了 <code>Embedder</code> 层的具体实现信息，此结构体在 <code>content\public\app\content_main.h</code> 中定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\public\app\content_main.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentMainParams</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ContentMainParams</span><span class="params">(ContentMainDelegate* delegate)</span></span></span><br><span class="line"><span class="function">      : <span class="title">delegate</span><span class="params">(delegate)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  ContentMainDelegate* delegate;</span><br><span class="line"></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>其中有一个重要的成员变量 <code>delegate</code>，其类型为 <code>content::ContentMainDelegate</code>，它在 <code>content\public\app\content_main_delegate.cc</code> 中定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\public\app\content_main_delegate.cc</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CONTENT_EXPORT</span> <span class="title">ContentMainDelegate</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~ContentMainDelegate() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">BasicStartupComplete</span><span class="params">(<span class="keyword">int</span>* exit_code)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PreSandboxStartup</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SandboxInitialized</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; process_type)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">RunProcess</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; process_type,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> MainFunctionParams&amp; main_function_params)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ProcessExiting</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; process_type)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PreCreateMainMessageLoop</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentClientInitializer</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> ContentBrowserClient* <span class="title">CreateContentBrowserClient</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> ContentGpuClient* <span class="title">CreateContentGpuClient</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> ContentRendererClient* <span class="title">CreateContentRendererClient</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> ContentUtilityClient* <span class="title">CreateContentUtilityClient</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，这里定义了一系列与启动相关的操作，并且通过几个 <code>CreateXXX</code> 的函数，获取 <code>ContentBrowserClient</code>、<code>ContentRendererClient</code> 等接口具体的实现，这也是 <code>content API</code> 的巧妙设计，通过这种方式，将浏览器的实现放入了 <code>content</code> 中。</p><p>继续往下看，<code>content::ContentMain()</code> 中调用了 <code>content\app\content_main.cc</code> 中的 <code>service_manager::Main()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentMain</span><span class="params">(<span class="keyword">const</span> ContentMainParams&amp; params)</span> </span>&#123;</span><br><span class="line">  <span class="function">ContentServiceManagerMainDelegate <span class="title">delegate</span><span class="params">(params)</span></span>;</span><br><span class="line">  <span class="function">service_manager::MainParams <span class="title">main_params</span><span class="params">(&amp;delegate)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(OS_WIN) &amp;&amp; !defined(OS_ANDROID)</span></span><br><span class="line">  main_params.argc = params.argc;</span><br><span class="line">  main_params.argv = params.argv;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> service_manager::Main(main_params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，使用一个 <code>content::ContentServiceManagerMainDelegate</code> 对象来构建了 <code>main_params</code>，并传入了 <code>service_manager::Main()</code>。</p><h2 id="5、service-manager-Main-函数"><a href="#5、service-manager-Main-函数" class="headerlink" title="5、service_manager::Main 函数"></a>5、service_manager::Main 函数</h2><p><code>service_manager::Main</code> 函数位于 <code>services\service_manager\embedder\main.cc</code>，接收一个 <code>MainParams</code> 类型的参数，具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services\service_manager\embedder\main.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Main</span><span class="params">(<span class="keyword">const</span> MainParams&amp; params)</span> </span>&#123;</span><br><span class="line">  MainDelegate* delegate = params.delegate;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  ProcessType process_type = delegate-&gt;OverrideProcessType();</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// A flag to indicate whether Main() has been called before. On Android, we</span></span><br><span class="line">  <span class="comment">// may re-run Main() without restarting the browser process. This flag</span></span><br><span class="line">  <span class="comment">// prevents initializing things more than once.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> is_initialized = <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(OS_ANDROID)</span></span><br><span class="line">  DCHECK(!is_initialized);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (!is_initialized) &#123;</span><br><span class="line">    is_initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line">    base::win::RegisterInvalidParamHandler();</span><br><span class="line">    ui::win::CreateATLModuleIfNeeded();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// defined(OS_WIN)</span></span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    base::CommandLine::Init(argc, argv);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span>&amp; command_line = *base::CommandLine::ForCurrentProcess();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line">    base::win::SetupCRT(command_line);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    MainDelegate::InitializeParams init_params;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    mojo::core::Init(mojo_config);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    exit_code = delegate-&gt;Initialize(init_params);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span>&amp; command_line = *base::CommandLine::ForCurrentProcess();</span><br><span class="line">  <span class="keyword">if</span> (process_type == ProcessType::kDefault) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> type_switch =</span><br><span class="line">        command_line.GetSwitchValueASCII(switches::kProcessType);</span><br><span class="line">    <span class="keyword">if</span> (type_switch == switches::kProcessTypeServiceManager) &#123;</span><br><span class="line">      process_type = ProcessType::kServiceManager;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type_switch == switches::kProcessTypeService) &#123;</span><br><span class="line">      process_type = ProcessType::kService;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      process_type = ProcessType::kEmbedder;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (process_type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ProcessType::kDefault:</span><br><span class="line">      NOTREACHED();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ProcessType::kServiceManager:</span><br><span class="line">      exit_code = RunServiceManager(delegate);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ProcessType::kService:</span><br><span class="line">      CommonSubprocessInit();</span><br><span class="line">      exit_code = RunService(delegate);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ProcessType::kEmbedder:</span><br><span class="line">      <span class="keyword">if</span> (delegate-&gt;IsEmbedderSubprocess())</span><br><span class="line">        CommonSubprocessInit();</span><br><span class="line">      exit_code = delegate-&gt;RunEmbedderProcess();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process_type == ProcessType::kEmbedder)</span><br><span class="line">    delegate-&gt;ShutDownEmbedderProcess();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> exit_code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里截取的代码比较长，也非常重要，我们主要关注这四个部分：</p><ul><li>根据传入的 <code>delegate</code> 和 <code>command_line</code> 决定进程的类型</li><li>运行环境的初始化，比如 <code>CreateATLModuleIfNeeded</code>，<code>SetupCRT</code> 并用 <code>is_initialized</code> 来防止重复执行</li><li>通过传入的 <code>delegate</code> 进行程序的初始化操作，<code>delegate-&gt;Initialize(init_params)</code></li><li>根据进程类型启动相应的工作</li></ul><p>这里的 <code>delegate</code> 类型为 <code>service_manager::MainDelegate*</code>，是在 <code>services/service_manager/embedder/main_delegate.h</code> 中定义的抽象类，在这里我们主要关注它的 <code>Initialize</code>、<code>RunEmbedderProcess</code> 和 <code>ShutDownEmbedderProcess</code>，其中 <code>Initialize</code> 为被声明为纯虚函数，<code>RunEmbedderProcess</code> 和 <code>ShutDownEmbedderProcess</code> 又是什么都不做的，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/service_manager/embedder/main_delegate.h</span></span><br><span class="line"></span><br><span class="line"><span class="function">class <span class="title">COMPONENT_EXPORT</span><span class="params">(SERVICE_MANAGER_EMBEDDER)</span> MainDelegate </span>&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Perform early process initialization. Returns -1 if successful, or the exit</span></span><br><span class="line">  <span class="comment">// code with which the process should be terminated due to initialization</span></span><br><span class="line">  <span class="comment">// failure.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Initialize</span><span class="params">(<span class="keyword">const</span> InitializeParams&amp; params)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Runs the embedder&#x27;s own main process logic. Called exactly once after a</span></span><br><span class="line">  <span class="comment">// successful call to Initialize(), and only if the Service Manager core does</span></span><br><span class="line">  <span class="comment">// not know what to do otherwise -- i.e., if it is not starting a new Service</span></span><br><span class="line">  <span class="comment">// Manager instance or launching an embedded service.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Returns the exit code to use when terminating the process after</span></span><br><span class="line">  <span class="comment">// RunEmbedderProcess() (and then ShutDown()) completes.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">RunEmbedderProcess</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Called just before process exit if RunEmbedderProcess() was called.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShutDownEmbedderProcess</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// services/service_manager/embedder/main_delegate.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MainDelegate::RunEmbedderProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainDelegate::ShutDownEmbedderProcess</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>回到 <code>service_manager::Main()</code>，我们看到第一句 <code>MainDelegate* delegate = params.delegate;</code> 中的 <code>params.delegate</code> 就是前面在 <code>content::ContentMain</code> 中构建 <code>main_params</code> 所使用的 <code>content::ContentServiceManagerMainDelegate</code> 对象，因此，上述的三个函数 <code>Initialize</code>、<code>RunEmbedderProcess</code>、<code>ShutDownEmbedderProcess</code> 是由 <code>ContentServiceManagerMainDelegate</code> 来最终实现的，来看代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_service_manager_main_delegate.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentServiceManagerMainDelegate::Initialize</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> InitializeParams&amp; params)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> content_main_runner_-&gt;Initialize(content_main_params_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentServiceManagerMainDelegate::RunEmbedderProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> content_main_runner_-&gt;Run(start_service_manager_only_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ContentServiceManagerMainDelegate::ShutDownEmbedderProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(OS_ANDROID)</span></span><br><span class="line">  content_main_runner_-&gt;Shutdown();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这三个函数的定义中，都使用了 <code>content_main_runner_</code> 这个成员变量来具体执行，它的定义为 <code>std::unique_ptr&lt;ContentMainRunnerImpl&gt;</code>。</p><h2 id="6、整个程序的Runner，content-ContentMainRunnerImpl"><a href="#6、整个程序的Runner，content-ContentMainRunnerImpl" class="headerlink" title="6、整个程序的Runner，content::ContentMainRunnerImpl"></a>6、整个程序的Runner，content::ContentMainRunnerImpl</h2><p>这个 <code>content::ContentMainRunnerImpl</code> 是 <code>content::ContentMainRunner</code> 接口的一个实现，先来看接口的声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CONTENT_EXPORT</span> <span class="title">ContentMainRunner</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~ContentMainRunner() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a new ContentMainRunner object.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> ContentMainRunner* <span class="title">Create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize all necessary content state.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Initialize</span><span class="params">(<span class="keyword">const</span> ContentMainParams&amp; params)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Perform the default run logic.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">Run</span><span class="params">(<span class="keyword">bool</span> start_service_manager_only)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Shut down the content state.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Shutdown</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来看实现类的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentMainRunnerImpl</span> :</span> <span class="keyword">public</span> ContentMainRunner &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> ContentMainRunnerImpl* <span class="title">Create</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  ContentMainRunnerImpl();</span><br><span class="line">  ~ContentMainRunnerImpl() <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">TerminateForFatalInitializationError</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ContentMainRunner:</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Initialize</span><span class="params">(<span class="keyword">const</span> ContentMainParams&amp; params)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Run</span><span class="params">(<span class="keyword">bool</span> start_service_manager_only)</span> <span class="keyword">override</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Shutdown</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、ContentMainRunner-Initialize-函数"><a href="#7、ContentMainRunner-Initialize-函数" class="headerlink" title="7、ContentMainRunner::Initialize() 函数"></a>7、ContentMainRunner::Initialize() 函数</h2><p>先来看 <code>Initialize</code> 函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentMainRunnerImpl::Initialize</span><span class="params">(<span class="keyword">const</span> ContentMainParams&amp; params)</span> </span>&#123;</span><br><span class="line">  ui_task_ = params.ui_task;</span><br><span class="line">  created_main_parts_closure_ = params.created_main_parts_closure;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line">  sandbox_info_ = *params.sandbox_info;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  <span class="comment">// !OS_WIN</span></span></span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  is_initialized_ = <span class="literal">true</span>;</span><br><span class="line">  delegate_ = params.delegate;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> exit_code = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (delegate_-&gt;BasicStartupComplete(&amp;exit_code))</span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">  completed_basic_startup_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">    delegate_-&gt;PreSandboxStartup();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line">    <span class="keyword">if</span> (!InitializeSandbox(</span><br><span class="line">            service_manager::SandboxTypeFromCommandLine(command_line),</span><br><span class="line">            params.sandbox_info))</span><br><span class="line">      <span class="keyword">return</span> TerminateForFatalInitializationError();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(OS_MACOSX)</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    delegate_-&gt;SandboxInitialized(process_type);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return -1 to indicate no early termination.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致看一下，在这个 <code>Initialize</code> 中，主要是根据 <code>command_line</code> 启动了相应的 <code>sandbox service</code>，并在启动前后都触发了 <code>delegate_-&gt;PreSandboxStartup()</code> 和 <code>delegate_-&gt;SandboxInitialized(process_type)</code>，这个 <code>delegate_</code> 来自于传入的 <code>content::ContentMainParams</code> 结构体，这个结构体是在 <code>chrome_main.cc</code> 中调用 <code>content::ContentMain(params)</code> 时所创建，所以这个 <code>delegate_</code> 正是前面所提到的巧妙设计中，继承自 <code>content::ContentMainDelegate</code> 的 <code>ChromeMainDelegate</code> 对象，通过这一系列的调用，<code>content</code> 层就把创建 <code>sandbox service</code> 前后的事件触发了出来，具体实现者只要在 <code>ChromeMainDelegate</code> 中填充这两个时间点要做的事即可。</p><h2 id="8、进程入口，ContentMainRunner-Run-函数"><a href="#8、进程入口，ContentMainRunner-Run-函数" class="headerlink" title="8、进程入口，ContentMainRunner::Run() 函数"></a>8、进程入口，ContentMainRunner::Run() 函数</h2><p>再来看 <code>Run</code> 函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // content\app\content_main_runner_impl.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentMainRunnerImpl::Run</span><span class="params">(<span class="keyword">bool</span> start_service_manager_only)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> base::CommandLine&amp; command_line =</span><br><span class="line">      *base::CommandLine::ForCurrentProcess();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> process_type =</span><br><span class="line">      command_line.GetSwitchValueASCII(switches::kProcessType);</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="function">MainFunctionParams <span class="title">main_params</span><span class="params">(command_line)</span></span>;</span><br><span class="line">  main_params.ui_task = ui_task_;</span><br><span class="line">  main_params.created_main_parts_closure = created_main_parts_closure_;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process_type.empty())</span><br><span class="line">    <span class="keyword">return</span> RunServiceManager(main_params, start_service_manager_only);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> RunOtherNamedProcessTypeMain(process_type, main_params, delegate_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处先判断 <code>process_type</code> 是否为空，为空则代表当前执行的是默认进程（一般情况下为 <code>Browser</code> 进程），则调用 <code>RunServiceManager()</code>，否则调用 <code>RunOtherNamedProcessTypeMain</code> 根据<code>process_type</code> 来执行相应的进程。先来看 <code>RunServiceManager</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ContentMainRunnerImpl::RunServiceManager</span><span class="params">(MainFunctionParams&amp; main_params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             <span class="keyword">bool</span> start_service_manager_only)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!service_manager_context_) &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    delegate_-&gt;PreCreateMainMessageLoop();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    delegate_-&gt;PostEarlyInitialization(main_params.ui_task != <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (should_start_service_manager_only)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  is_browser_main_loop_started_ = <span class="literal">true</span>;</span><br><span class="line">  startup_data_ = <span class="built_in">std</span>::make_unique&lt;StartupDataImpl&gt;();</span><br><span class="line">  startup_data_-&gt;thread = <span class="built_in">std</span>::move(service_manager_thread_);</span><br><span class="line">  startup_data_-&gt;service_manager_context = service_manager_context_.get();</span><br><span class="line">  main_params.startup_data = startup_data_.get();</span><br><span class="line">  <span class="keyword">return</span> RunBrowserProcessMain(main_params, delegate_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，这里通过 <code>delegate_</code> 做了一些操作之后，最后调用了 <code>RunBrowserProcessMain()</code> 函数，内容如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RunBrowserProcessMain</span><span class="params">(<span class="keyword">const</span> MainFunctionParams&amp; main_function_params,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ContentMainDelegate* delegate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> exit_code = delegate-&gt;RunProcess(<span class="string">&quot;&quot;</span>, main_function_params);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_ANDROID)</span></span><br><span class="line">  <span class="comment">// In Android&#x27;s browser process, the negative exit code doesn&#x27;t mean the</span></span><br><span class="line">  <span class="comment">// default behavior should be used as the UI message loop is managed by</span></span><br><span class="line">  <span class="comment">// the Java and the browser process&#x27;s default behavior is always</span></span><br><span class="line">  <span class="comment">// overridden.</span></span><br><span class="line">  <span class="keyword">return</span> exit_code;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">if</span> (exit_code &gt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> exit_code;</span><br><span class="line">  <span class="keyword">return</span> BrowserMain(main_function_params);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单明了，首先通过 <code>delegate-&gt;RunProcess</code> 把执行默认进程的优先权交由 <code>Embedder</code> 层，如果 <code>Embedder</code> 层成功执行了进程并最终返回了成功标志（<code>exit_code &gt;= 0</code>），那么就退出函数；如果 <code>Embedder</code> 层对默认进程没有定义，就继续执行 <code>content::BrowserMain</code>，由此，<code>Browser</code> 进程开始执行。</p><p>再来看 <code>RunOtherNamedProcessTypeMain</code> 函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content\app\content_main_runner_impl.cc</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RunOtherNamedProcessTypeMain</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; process_type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">const</span> MainFunctionParams&amp; main_function_params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 ContentMainDelegate* delegate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> MainFunction kMainFunctions[] = &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    &#123;switches::kUtilityProcess, UtilityMain&#125;,</span><br><span class="line">    &#123;switches::kRendererProcess, RendererMain&#125;,</span><br><span class="line">    &#123;switches::kGpuProcess, GpuMain&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; base::size(kMainFunctions); ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process_type == kMainFunctions[i].name) &#123;</span><br><span class="line">      <span class="keyword">int</span> exit_code = delegate-&gt;RunProcess(process_type, main_function_params);</span><br><span class="line">      <span class="keyword">if</span> (exit_code &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> exit_code;</span><br><span class="line">      <span class="keyword">return</span> kMainFunctions[i].function(main_function_params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If it&#x27;s a process we don&#x27;t know about, the embedder should know.</span></span><br><span class="line">  <span class="keyword">return</span> delegate-&gt;RunProcess(process_type, main_function_params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先建立了一个进程类型和入口函数指针的对应数组，再根据进程类型去具体执行，执行的过程与 <code>Browser</code> 进程一样，先通过 <code>delegate-&gt;RunProcess</code> 交由 <code>Embedder</code> 层处理，如果未处理再调用默认的进程入口函数，可以看到分别提供了 <code>UtilityMain</code>、<code>RendererMain</code>、<code>GpuMain</code> 这三个进程的入口，其中 <code>RendererMain</code> 则是我们关注的 <code>Renderer</code> 进程的入口函数，<code>Renderer</code> 进程从此处开始执行。最后一句，如果进程类型不在以上范围内，则交由 <code>Embedder</code> 去处理。</p><h2 id="9、程序结束"><a href="#9、程序结束" class="headerlink" title="9、程序结束"></a>9、程序结束</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ContentMainRunnerImpl::Shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DCHECK(is_initialized_);</span><br><span class="line">  DCHECK(!is_shutdown_);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (completed_basic_startup_) &#123;</span><br><span class="line">    <span class="keyword">const</span> base::CommandLine&amp; command_line =</span><br><span class="line">        *base::CommandLine::ForCurrentProcess();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> process_type =</span><br><span class="line">        command_line.GetSwitchValueASCII(switches::kProcessType);</span><br><span class="line"></span><br><span class="line">    delegate_-&gt;ProcessExiting(process_type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(CHROME_MULTIPLE_DLL_CHILD)</span></span><br><span class="line">  <span class="comment">// The BrowserTaskExecutor needs to be destroyed before |exit_manager_|.</span></span><br><span class="line">  BrowserTaskExecutor::Shutdown();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// !defined(CHROME_MULTIPLE_DLL_CHILD)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(OS_WIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _CRTDBG_MAP_ALLOC</span></span><br><span class="line">  _CrtDumpMemoryLeaks();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// _CRTDBG_MAP_ALLOC</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// OS_WIN</span></span></span><br><span class="line"></span><br><span class="line">  exit_manager_.reset(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">  delegate_ = <span class="literal">nullptr</span>;</span><br><span class="line">  is_shutdown_ = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过 <code>delegate_-&gt;ProcessExiting(process_type)</code> 通知 <code>Embedder</code> 层处理，然后做了一些善后释放的工作，最后将 <code>is_shutdown_</code> 标记置为 <code>true</code>。</p><h2 id="10、总结"><a href="#10、总结" class="headerlink" title="10、总结"></a>10、总结</h2><img src="/2019/04/01/chromium-startup/startup.png" class="" title="启动相关类图"><p>前面分析了这么多，其实结合类图来看一下还是很简单明了的，主要起到作用的就是图中标红的三个，<code>service_manager::Main</code> 通过 <code>content::ContentServiceManagerMainDelegate</code> 的实例调用了 <code>content::ContentMainRunnerImpl</code> 实例中的 <code>Initialize()</code>、<code>Run()</code>、<code>Shutdown()</code> 函数，而在这个Runner中，又通过 <code>content::ContentMainDelegate</code> 接口指针调用到了由 <code>Embedder</code> 层创建的 <code>ChromeMainDelegate</code> 实例中的函数，由此完成了程序的启动以及 <code>Content</code> 层对 <code>Embedder</code> 的交互。</p>]]></content>
      
      
        <tags>
            
            <tag> chromium </tag>
            
            <tag> main </tag>
            
            <tag> browser </tag>
            
            <tag> renderer </tag>
            
            <tag> startup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 6.7 安装 Oracle 11g2</title>
      <link href="/2019/04/01/centos6-7-oracle/"/>
      <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><h2 id="1-配hosts文件"><a href="#1-配hosts文件" class="headerlink" title="1 配hosts文件"></a>1 配hosts文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/hosts</span></span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.58 oracle</span><br></pre></td></tr></table></figure><h2 id="2-关闭SELINUX"><a href="#2-关闭SELINUX" class="headerlink" title="2 关闭SELINUX"></a>2 关闭SELINUX</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo setenforce 0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/selinux/config</span></span><br></pre></td></tr></table></figure><p>修改文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">SELINUX</span>=disabled</span><br></pre></td></tr></table></figure><h2 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3 关闭防火墙"></a>3 关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service iptables stop</span></span><br></pre></td></tr></table></figure><h2 id="4-安装依赖包"><a href="#4-安装依赖包" class="headerlink" title="4 安装依赖包"></a>4 安装依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install binutils compat-libstdc++ cpp elfutils elfutils-libelf elfutils-libelf-devel elfutils-libs gcc gcc-c++ glibc glibc-common glibc-devel glibc-headers ksh libaio libaio-devel libgcc libgomp libstdc++ libstdc++-devel make mpfr nss-softokn-freebl sysstat tzdata-java unixODBC unixODBC-devel cloog-ppl kernel-headers libtool-ltdl ppl</span></span><br></pre></td></tr></table></figure><h2 id="5-创建用户、组"><a href="#5-创建用户、组" class="headerlink" title="5 创建用户、组"></a>5 创建用户、组</h2><p>没有建特别的用户组，直接用了默认的，并把oracle加入sudo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser oracle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo passwd oracle</span></span><br></pre></td></tr></table></figure><h2 id="6-创建安装目录"><a href="#6-创建安装目录" class="headerlink" title="6 创建安装目录"></a>6 创建安装目录</h2><p>把oracle安装在 <code>/opt/oracle</code> 下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /opt/oracle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /opt/oracle/product/112010/db_1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /opt/oracle/oradata</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /opt/oracle/inventory</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /opt/oracle/flash_recovery_area</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R oracle:oracle /opt/oracle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chmod -R 775 /opt/oracle</span></span><br></pre></td></tr></table></figure><h2 id="7-修改内核参数"><a href="#7-修改内核参数" class="headerlink" title="7 修改内核参数"></a>7 修改内核参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/sysctl.conf</span></span><br></pre></td></tr></table></figure><p>修改文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fs.aio-max-nr</span> = <span class="number">1048576</span>  <span class="comment"># 指的是可以同时拥有异步I/O请求的数目，Oracle推荐的值为1048576（1024×1024），也就是1024Kb个。</span></span><br><span class="line"><span class="attr">fs.file-max</span> = <span class="number">6815744</span>  <span class="comment"># 系统所有进程一共可以打开的文件数量 64bytes  cat /proc/sys/fs/file-nr 在&#x27;高负荷&#x27;的情况，看看有多少文件描述符都在使用。</span></span><br><span class="line"><span class="attr">kernel.shmmni</span> = <span class="number">4096</span>  <span class="comment"># 整个系统共享内存段的最大数量。</span></span><br><span class="line"><span class="attr">kernel.sem</span> = <span class="number">250</span> <span class="number">32000</span> <span class="number">100</span> <span class="number">128</span></span><br><span class="line">    <span class="comment"># 1.同一类信号的最多数量(semmsl)。</span></span><br><span class="line">    <span class="comment"># 2.系统中信号的最多数目，=semmni*semmsl (semmns)。</span></span><br><span class="line">    <span class="comment"># 3.每个semop系统调用所包含的最大的操作数(能调用的信号量的最多次数) (semopm)。</span></span><br><span class="line">    <span class="comment"># 4.系统中信号类型的数目的最大值，一个信号量标识符代表一个类型(semmni)。</span></span><br><span class="line"><span class="attr">net.ipv4.ip_local_port_range</span> = <span class="number">32768</span> <span class="number">61000</span>  <span class="comment"># 表示TCP/UDP协议打开的本地端口号。 默认设置：1024 4999 建议设置：32768 61000。</span></span><br><span class="line"><span class="attr">net.core.rmem_default</span> = <span class="number">262144</span>  <span class="comment"># 设置接收socket的缺省缓存大小(字节)。</span></span><br><span class="line"><span class="attr">net.core.rmem_max</span> = <span class="number">4194304</span>  <span class="comment"># 设置接收socket的最大缓存大小(字节)</span></span><br><span class="line"><span class="attr">net.core.wmem_default</span> = <span class="number">212992</span>  <span class="comment"># 设置发送的socket缺省缓存大小(字节)</span></span><br><span class="line"><span class="attr">net.core.wmem_max</span> = <span class="number">1048576</span>  <span class="comment"># 设置发送的socket最大缓存大小(字节)</span></span><br></pre></td></tr></table></figure><p>保存后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo sysctl -p</span></span><br></pre></td></tr></table></figure><h2 id="8-修改用户限制文件（配置项未理解）"><a href="#8-修改用户限制文件（配置项未理解）" class="headerlink" title="8 修改用户限制文件（配置项未理解）"></a>8 修改用户限制文件（配置项未理解）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/security/limits.conf</span></span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oracle          soft    nproc   2047</span><br><span class="line">oracle          hard    nproc   16384</span><br><span class="line">oracle          soft    nofile  1024</span><br><span class="line">oracle          hard    nofile  65536</span><br><span class="line">oracle          soft    stack   10240</span><br></pre></td></tr></table></figure><h2 id="9-关联设置（暂时不知道干嘛用的）"><a href="#9-关联设置（暂时不知道干嘛用的）" class="headerlink" title="9 关联设置（暂时不知道干嘛用的）"></a>9 关联设置（暂时不知道干嘛用的）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/pam.d/login</span></span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session required  /lib64/security/pam_limits.so</span><br><span class="line">session required   pam_limits.so</span><br></pre></td></tr></table></figure><h2 id="10-修改-etc-profile（暂时不知道干嘛用的）"><a href="#10-修改-etc-profile（暂时不知道干嘛用的）" class="headerlink" title="10 修改/etc/profile（暂时不知道干嘛用的）"></a>10 修改/etc/profile（暂时不知道干嘛用的）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/profile</span></span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">&quot;oracle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">&quot;/bin/ksh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ulimit</span> -p 16384</span><br><span class="line">        <span class="built_in">ulimit</span> -n 65536</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>切换至root账号下使之生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su root</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><h2 id="11-修改oracle用户环境变量"><a href="#11-修改oracle用户环境变量" class="headerlink" title="11 修改oracle用户环境变量"></a>11 修改oracle用户环境变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi .bash_profile</span></span><br></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for oracle</span></span><br><span class="line"><span class="built_in">export</span> ORACLE_BASE=/opt/oracle;</span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/opt/oracle/product/112010/db_1</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=orcl;</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$ORACLE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORACLE_HOME</span>/lib:/usr/lib</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="string">&quot;oracle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">&quot;/bin/ksh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ulimit</span> -p 16384</span><br><span class="line">        <span class="built_in">ulimit</span> -n 65536</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">umask</span> 022</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>使之生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> .bash_profile</span></span><br></pre></td></tr></table></figure><p>此时若命令执行失败，提示：<code>-bash: ulimit: open files: cannot modify limit: Operation not permitted</code>，是因为ssh登录的缘故，需要修改sshd配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/ssh/sshd_config</span></span><br></pre></td></tr></table></figure><p>把UseLogin改为yes，重启ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service sshd restart</span></span><br></pre></td></tr></table></figure><p>重点，这里重启完sshd之后，一定要exit后重新用ssh连接，否则依然会报错</p><h1 id="二、正式开始安装"><a href="#二、正式开始安装" class="headerlink" title="二、正式开始安装"></a>二、正式开始安装</h1><h2 id="1-准备安装文件"><a href="#1-准备安装文件" class="headerlink" title="1 准备安装文件"></a>1 准备安装文件</h2><p>把解压后的database文件夹放到 <code>/opt/oralce/</code> 下</p><h2 id="2-编辑oracle数据库安装应答文件"><a href="#2-编辑oracle数据库安装应答文件" class="headerlink" title="2 编辑oracle数据库安装应答文件"></a>2 编辑oracle数据库安装应答文件</h2><p>修改db_install.rsp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi db_install.rsp</span></span><br></pre></td></tr></table></figure><p>修改文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oracle.install.option</span>=INSTALL_DB_SWONLY  <span class="comment"># 29行 安装类型</span></span><br><span class="line"><span class="attr">ORACLE_HOSTNAME</span>=chances  <span class="comment"># 37行 主机名称</span></span><br><span class="line"><span class="attr">UNIX_GROUP_NAME</span>=oracle  <span class="comment"># 42行 安装组</span></span><br><span class="line"><span class="attr">INVENTORY_LOCATION</span>=/opt/oracle/inventory  <span class="comment"># 47行 INVENTORY目录</span></span><br><span class="line"><span class="attr">SELECTED_LANGUAGES</span>=en,zh_CN  <span class="comment"># 78行 选择语言，可能因为linux是en的，所以这里一定要加上en</span></span><br><span class="line"><span class="attr">ORACLE_HOME</span>=/opt/oracle/product/<span class="number">112010</span>/db_1  <span class="comment"># 83行 oracle_home</span></span><br><span class="line"><span class="attr">ORACLE_BASE</span>=/opt/oracle  <span class="comment"># 88行 oracle_base</span></span><br><span class="line"><span class="attr">oracle.install.db.InstallEdition</span>=EE  <span class="comment"># 99行 oracle版本</span></span><br><span class="line"><span class="attr">oracle.install.db.DBA_GROUP</span>=oracle  <span class="comment"># 142行 dba用户组</span></span><br><span class="line"><span class="attr">oracle.install.db.OPER_GROUP</span>=oracle  <span class="comment"># 147行 oper用户组</span></span><br><span class="line"><span class="attr">oracle.install.db.config.starterdb.type</span>=GENERAL_PURPOSE  <span class="comment"># 160行 数据库类型</span></span><br><span class="line"><span class="attr">oracle.install.db.config.starterdb.globalDBName</span>=orcl  <span class="comment"># 165行 globalDBName</span></span><br><span class="line"><span class="attr">oracle.install.db.config.starterdb.SID</span>=orcl  <span class="comment"># 170行 SID</span></span><br><span class="line"><span class="attr">oracle.install.db.config.starterdb.memoryLimit</span>=<span class="number">800</span>  <span class="comment"># 200行 自动管理内存的最小内存(M)</span></span><br><span class="line"><span class="attr">oracle.install.db.config.starterdb.password.ALL</span>=xxxx  <span class="comment"># 233行 设定所有数据库用户使用同一个密码</span></span><br><span class="line"><span class="attr">DECLINE_SECURITY_UPDATES</span>=<span class="literal">true</span>  <span class="comment"># 385行 设置安全更新</span></span><br></pre></td></tr></table></figure><h2 id="3-开始安装"><a href="#3-开始安装" class="headerlink" title="3 开始安装"></a>3 开始安装</h2><p>用oracle账号进入 <code>/opt/oracle/database/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su oracle</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/oracle/database/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./runInstaller -silent -responseFile /opt/oracle/database/response/db_install.rsp -ignorePrereq</span></span><br></pre></td></tr></table></figure><p>在日志里看到这个就成功了：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>oracle<span class="regexp">/inventory/</span>orainstRoot.sh</span><br><span class="line"><span class="regexp">/opt/</span>oracle<span class="regexp">/product/</span><span class="number">112010</span><span class="regexp">/db_1/</span>root.sh</span><br><span class="line">To execute the configuration scripts:</span><br><span class="line">        <span class="number">1</span>. Open a terminal window</span><br><span class="line">        <span class="number">2</span>. Log in as <span class="string">&quot;root&quot;</span></span><br><span class="line">        <span class="number">3</span>. Run the scripts</span><br><span class="line">        <span class="number">4</span>. <span class="keyword">Return</span> to <span class="keyword">this</span> window and hit <span class="string">&quot;Enter&quot;</span> key to <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p>用root用户登录按提示执行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /opt/oracle/inventory/orainstRoot.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /opt/oracle/product/112010/db_1/root.sh</span></span><br></pre></td></tr></table></figure><h2 id="4-配置监听"><a href="#4-配置监听" class="headerlink" title="4 配置监听"></a>4 配置监听</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /opt/oracle/database/response/netca.rsp</span></span><br></pre></td></tr></table></figure><p>检查这些参数：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">INSTALL_TYPE</span>=<span class="string">&quot;&quot;</span>custom<span class="string">&quot;&quot;</span>  <span class="comment">#安装的类型</span></span><br><span class="line"><span class="attr">LISTENER_NUMBER</span>=<span class="number">1</span>  <span class="comment">#监听器数量</span></span><br><span class="line"><span class="attr">LISTENER_NAMES</span>=&#123;<span class="string">&quot;LISTENER&quot;</span>&#125;  <span class="comment">#监听器的名称列表</span></span><br><span class="line"><span class="attr">LISTENER_PROTOCOLS</span>=&#123;<span class="string">&quot;TCP;1521&quot;</span>&#125;  <span class="comment">#监听器使用的通讯协议列表</span></span><br><span class="line"><span class="attr">LISTENER_START</span>=<span class="string">&quot;&quot;</span>LISTENER<span class="string">&quot;&quot;</span>  <span class="comment">#监听器启动的名称</span></span><br></pre></td></tr></table></figure><p>保存后运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netca -silent -responseFile /opt/oracle/database/response/netca.rsp</span></span><br></pre></td></tr></table></figure><h1 id="三、添加数据库实例"><a href="#三、添加数据库实例" class="headerlink" title="三、添加数据库实例"></a>三、添加数据库实例</h1><h2 id="1-检查配置"><a href="#1-检查配置" class="headerlink" title="1 检查配置"></a>1 检查配置</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">RESPONSEFILE_VERSION</span> = <span class="string">&quot;11.2.0&quot;</span>  <span class="comment">#不能更改</span></span><br><span class="line"><span class="attr">OPERATION_TYPE</span> = <span class="string">&quot;createDatabase&quot;</span></span><br><span class="line"><span class="attr">GDBNAME</span> = <span class="string">&quot;orcl&quot;</span>  <span class="comment">#数据库的名字</span></span><br><span class="line"><span class="attr">SID</span> = <span class="string">&quot;ORCL&quot;</span>  <span class="comment">#对应的实例名字</span></span><br><span class="line"><span class="attr">TEMPLATENAME</span> = <span class="string">&quot;General_Purpose.dbc&quot;</span>  <span class="comment">#建库用的模板文件</span></span><br><span class="line"><span class="attr">SYSPASSWORD</span> = <span class="string">&quot;oracle&quot;</span>  <span class="comment">#SYS管理员密码</span></span><br><span class="line"><span class="attr">SYSTEMPASSWORD</span> = <span class="string">&quot;sys&quot;</span>  <span class="comment">#SYSTEM管理员密码</span></span><br><span class="line"><span class="attr">SYSMANPASSWORD</span> = <span class="string">&quot;sys&quot;</span></span><br><span class="line"><span class="attr">DBSNMPPASSWORD</span> = <span class="string">&quot;sys&quot;</span></span><br><span class="line"><span class="attr">DATAFILEDESTINATION</span> = /opt/oracle/oradata  <span class="comment">#数据文件存放目录</span></span><br><span class="line"><span class="attr">RECOVERYAREADESTINATION</span> = /opt/oracle/flash_recovery_area  <span class="comment">#恢复数据存放目录</span></span><br><span class="line"><span class="attr">CHARACTERSET</span> = <span class="string">&quot;ZHS16GBK&quot;</span>  <span class="comment">#字符集，重要!!!建库后一般不能更改，所以建库前要确定清楚。</span></span><br><span class="line"><span class="attr">TOTALMEMORY</span> = <span class="string">&quot;10240&quot;</span>  <span class="comment">#10240MB，物理内存10G。</span></span><br></pre></td></tr></table></figure><h2 id="2-安装实例"><a href="#2-安装实例" class="headerlink" title="2 安装实例"></a>2 安装实例</h2><p>进入oracle的bin目录运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dbca -silent -responseFile /opt/oracle/database/response/dbca.rsp</span></span><br></pre></td></tr></table></figure><p>查看实例进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep ora_ | grep -v grep</span></span><br></pre></td></tr></table></figure><p>查看监听状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsnrctl status</span></span><br></pre></td></tr></table></figure><p>修改以下几个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /opt/oracle/product/112010/db_1/bin/dbstart</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ORACLE_HOME_LISTNER</span>=<span class="variable">$ORACLE_HOME</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /opt/oracle/product/112010/db_1/bin/dbshut</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ORACLE_HOME_LISTNER</span>=<span class="variable">$ORACLE_HOME</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/oratab</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orcl:/opt/oracle/product/112010/db_1:Y</span><br></pre></td></tr></table></figure><p>使用 <code>dbshut、dbstart</code> 可以测试，查看监听状态</p><h1 id="四、结束"><a href="#四、结束" class="headerlink" title="四、结束"></a>四、结束</h1><p>打开selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/selinux/config</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu相关笔记</title>
      <link href="/2018/04/12/about-ubuntu/"/>
      <content type="html"><![CDATA[<h2 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkfs.ext4  /dev/sdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo blkid</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/fstab</span></span><br></pre></td></tr></table></figure><p>修改文件内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">UUID</span>=a450131d-<span class="number">8</span>c83-<span class="number">4092</span>-a028-<span class="number">887</span>b7f6495b5 /mnt/xxx ext4 defaults <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mount -a</span><br><span class="line">$ sudo chown -R xxx:xxx /mnt/xxx</span><br></pre></td></tr></table></figure><h2 id="18-04配置网络"><a href="#18-04配置网络" class="headerlink" title="18.04配置网络"></a>18.04配置网络</h2><p>不再使用 <code>/etc/network/interfaces</code></p><p>修改 <code>/etc/netplan/xxxxx.yaml</code></p><p>改完后 <code>sudo netplay apply</code></p>]]></content>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> 挂载 </tag>
            
            <tag> 硬盘 </tag>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记点Oracle的东西</title>
      <link href="/2017/09/17/about-oracle/"/>
      <content type="html"><![CDATA[<h1 id="表空间用户相关的东西"><a href="#表空间用户相关的东西" class="headerlink" title="表空间用户相关的东西"></a>表空间用户相关的东西</h1><p>遇到一个删除表空间失败的情况，先删用户，再删表空间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> xxx <span class="keyword">cascade</span>;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">tablespace</span> xxx <span class="keyword">including</span> <span class="keyword">contents</span> <span class="keyword">and</span> <span class="keyword">datafiles</span>;</span><br></pre></td></tr></table></figure><p>建表空间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> XXX</span><br><span class="line"><span class="keyword">datafile</span> <span class="string">&#x27;D:\Data\oradata\orcl\XXX.DBF&#x27;</span> <span class="keyword">size</span> <span class="number">50</span>M</span><br><span class="line"><span class="keyword">autoextend</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">next</span> <span class="number">10</span>M</span><br><span class="line"><span class="keyword">extent</span> <span class="keyword">management</span> <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure><p>建用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> XXX <span class="keyword">identified</span> <span class="keyword">by</span> xxx</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">tablespace</span> XXX</span><br><span class="line"><span class="keyword">temporary</span> <span class="keyword">tablespace</span> TEMP;</span><br></pre></td></tr></table></figure><p>给用户赋权：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>, <span class="keyword">resource</span>, dba <span class="keyword">to</span> xxx;</span><br></pre></td></tr></table></figure><p>有一次把表空间文件给删了，但是表空间还在，得想办法把表空间删掉：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> <span class="keyword">datafile</span> <span class="string">&#x27;XXX&#x27;</span> <span class="keyword">offline</span> <span class="keyword">drop</span>;</span><br></pre></td></tr></table></figure><p>非常简单的一句</p><h1 id="下面是关于Oracle-11g导出空表的方法"><a href="#下面是关于Oracle-11g导出空表的方法" class="headerlink" title="下面是关于Oracle 11g导出空表的方法"></a>下面是关于Oracle 11g导出空表的方法</h1><p>Oracle 11g开始，exp的时候，默认情况下是不会导出无数据的空表的，这时候要分两部分解决，其一修改设置，让以后建立的新表都能导出空表，另外一个则是对已有的数据表进行设置，具体做法如下：</p><h2 id="1、设置deferred-segment-creation-参数"><a href="#1、设置deferred-segment-creation-参数" class="headerlink" title="1、设置deferred_segment_creation 参数"></a>1、设置deferred_segment_creation 参数</h2><p>查看当前设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> parameter deferred_segment_creation</span><br></pre></td></tr></table></figure><p>修改参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> deferred_segment_creation=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="2、处理已有的空表："><a href="#2、处理已有的空表：" class="headerlink" title="2、处理已有的空表："></a>2、处理已有的空表：</h2><p>先找到所有的空表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> NUM_ROWS=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>把结果存到一个临时表里：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;alter table &#x27;</span>||table_name||<span class="string">&#x27; allocate extent;&#x27;</span> <span class="keyword">from</span> user_tables <span class="keyword">where</span> num_rows=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>把查询结果作为语句执行一遍就O了。</p>]]></content>
      
      
        <tags>
            
            <tag> Sqoop </tag>
            
            <tag> CDH </tag>
            
            <tag> Hadoop </tag>
            
            <tag> hbase </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 7 利用 systemctl 安装自动启服务</title>
      <link href="/2017/08/15/centos7-systemctl/"/>
      <content type="html"><![CDATA[<p>在 <code>/usr/lib/systemd/system</code> 文件夹下建立文件 <code>shadowsocks.service</code>，文件内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Shadowsocks Server</span><br><span class="line"><span class="attr">After</span>=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">PIDFile</span>=/var/shadowsocks/pid</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/ssserver -c /var/shadowsocks/conf.json -d start</span><br><span class="line"><span class="attr">ExecReload</span>=/usr/bin/ssserver -c /var/shadowsocks/conf.json -d restart</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/ssserver -d stop</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>给文件加上754权限：<code>chmod +754 shadowsocks.service</code>。</p><ul><li>用 <code>systemctl start shadowsocks.service</code> 就可以启动服务。</li><li>用 <code>systemctl enable shadowsocks.service</code> 就可以启用自动启服务。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> systemctl </tag>
            
            <tag> 自启动 </tag>
            
            <tag> 服务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hbase使用笔记</title>
      <link href="/2017/08/03/about-hbase/"/>
      <content type="html"><![CDATA[<p>记完hive后来点hbase的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect <span class="string">&#x27;jdbc:sqlserver://192.168.1.xxx;username=sa;password=xxx;DatabaseName=xxx&#x27;</span> --table sourcetablename --hbase-table hbasetablename --column-family cfname --split-by keycolumn --hbase-row-key rowkeycolumn --hbase-create-table</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Sqoop </tag>
            
            <tag> CDH </tag>
            
            <tag> Hadoop </tag>
            
            <tag> hbase </tag>
            
            <tag> sqlserver </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sqoop使用笔记</title>
      <link href="/2017/07/18/about-sqoop/"/>
      <content type="html"><![CDATA[<p>CDH装完后想通过sqoop2来把数据导入hive，结果发现导数据的过程中，虽然生成了10个map，但其中9个map都是空的，导致最后生成了9个0大小的文件和一个巨大的文件，没找到原因，只在官网找到这么一句话 <code>Note that 1.99.7 is not compatible with 1.4.6 and not feature complete, it is not intended for production deployment.</code></p><p>好吧，那我就不挣扎了，用Sqoop 1.4.6吧。把使用过程记录下来，以备后查：</p><ul><li>首先，去微软官网下载个sqlserver的jdbc驱动jar包，把它放在/var/lib/sqoop/下面。</li><li>查看数据库  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop list-databases --connect <span class="string">&#x27;jdbc:sqlserver://192.168.1.xxx;username=sa;password=xxx&#x27;</span></span></span><br></pre></td></tr></table></figure></li><li>导入一个库中的所有表，不过前提是这些表都有主键，按理说参数里应该有指定数据库名字的方法，我没找到，发现强行写在连接字符串里也行  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import-all-tables --connect <span class="string">&#x27;jdbc:sqlserver://192.168.1.xxx;username=sa;password=xxx;DatabaseName=XXX&#x27;</span> --hive-import</span></span><br></pre></td></tr></table></figure></li><li>导入一个表，在这个表没有主键的情况下，可以用–split-by参数来指定，同样我也还是不知道怎么用参数来指定数据库名字  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect <span class="string">&#x27;jdbc:sqlserver://192.168.1.xxx;username=sa;password=xxx;DatabaseName=XXX&#x27;</span> --table tablename --split-by split_column --hive-import</span></span><br></pre></td></tr></table></figure></li><li>导完后发现数据比原数据库多了一半，真蛋疼，研究之后发现，原来是因为我原表中有文本字段，有不少逗号和\n，而hive默认是使用逗号来作为字段分隔符，\n来作为行分隔符，所以还是需要加上quote来保证不被切割  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sqoop import --connect <span class="string">&#x27;jdbc:sqlserver://192.168.1.xxx;username=sa;password=xxx;DatabaseName=XXX&#x27;</span> --table tablename --split-by split_column --hive-import --fields-terminated-by , --escaped-by \\ --enclosed-by <span class="string">&#x27;\&quot;&#x27;</span></span></span><br></pre></td></tr></table></figure></li><li>上面的方法中，所有的字段都会被加上<code>&quot;&quot;</code>包括起来，其实也挺浪费空间的，使用另外一个参数 <code>--optionally-enclosed-by &#39;\&quot;&#39;</code>来代替 <code>--enclosed-by &#39;\&quot;&#39;</code>，就会自动用引号括起需要的字段，别的字段还是原样裸的。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Sqoop </tag>
            
            <tag> CDH </tag>
            
            <tag> Hadoop </tag>
            
            <tag> sqlserver </tag>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 6.7 安装 CDH 5.7 笔记</title>
      <link href="/2017/07/16/install-cdh-on-centos6/"/>
      <content type="html"><![CDATA[<h3 id="本笔记适用于-CentOS-6-7-CDH-5-7-0-的部署"><a href="#本笔记适用于-CentOS-6-7-CDH-5-7-0-的部署" class="headerlink" title="本笔记适用于 CentOS 6.7 + CDH 5.7.0 的部署"></a><font color="red"><strong>本笔记适用于 CentOS 6.7 + CDH 5.7.0 的部署</strong></font></h3><h1 id="1、网络配置及基础组件安装"><a href="#1、网络配置及基础组件安装" class="headerlink" title="1、网络配置及基础组件安装"></a>1、网络配置及基础组件安装</h1><p>打开网络，配hostname</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network</span></span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">HOSTNAME</span>=master</span><br></pre></td></tr></table></figure><p>配置IP地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br></pre></td></tr></table></figure><p>网络调通后，安装必要组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install psmisc libxslt-devel</span></span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br></pre></td></tr></table></figure><h1 id="2、设置SSH无密码访问"><a href="#2、设置SSH无密码访问" class="headerlink" title="2、设置SSH无密码访问"></a>2、设置SSH无密码访问</h1><p>在每台机器上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure><p>一路回车到底</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 600 ~/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>把所有机器的key文件放到master机器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp /root/.ssh/id_rsa.pub root@master:/root/.ssh/机器名_id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>在master上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /root/.ssh/机器1_id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /root/.ssh/机器2_id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p>最终再把authorized_keys放到每台机器上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp /root/.ssh/authorized_keys root@机器名:/root/.ssh/</span></span><br></pre></td></tr></table></figure><h1 id="3、关闭SELINUX（官方文档上有这一步，实陆发现不做也行）"><a href="#3、关闭SELINUX（官方文档上有这一步，实陆发现不做也行）" class="headerlink" title="3、关闭SELINUX（官方文档上有这一步，实陆发现不做也行）"></a>3、关闭SELINUX（官方文档上有这一步，实陆发现不做也行）</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> setenforce 0</span></span><br><span class="line">```修改文件 `/etc/selinux/config`</span><br><span class="line">```Ini</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>重启</p><h1 id="4、安装mysql，建库，hive-hue-oozie"><a href="#4、安装mysql，建库，hive-hue-oozie" class="headerlink" title="4、安装mysql，建库，hive hue oozie"></a>4、安装mysql，建库，hive hue oozie</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y mysql-server mysql mysql-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service mysqld start</span></span><br></pre></td></tr></table></figure><p>设置数据库密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>建库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hive <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> hue <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> oozie <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> amon <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span><span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;master&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;ddssoft&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h1 id="5、安装ntp"><a href="#5、安装ntp" class="headerlink" title="5、安装ntp"></a>5、安装ntp</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install ntp</span></span><br></pre></td></tr></table></figure><p>在这里，我们使用master作为集群的时间同步服务器，修改master上的ntp配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/ntp.conf</span></span><br></pre></td></tr></table></figure><p>首先加上这一句，允许内网的机器从本机同步时间</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br></pre></td></tr></table></figure><p>再把原有的server全部注释掉，换成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server 210.72.145.44 perfer</span><br><span class="line">server 202.112.10.36</span><br><span class="line">server 59.124.196.83</span><br><span class="line">restrict 210.72.145.44 nomodify notrap noquery</span><br><span class="line">restrict 202.112.10.36 nomodify notrap noquery</span><br><span class="line">restrict 59.124.196.83 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure><p>保存退出后先同步一下时间，再打开ntp服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ntpdate 202.112.10.36</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service ntpd start</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chkconfig ntpd on</span></span><br></pre></td></tr></table></figure><p>每台机器修改配置，把原有的server全部注释掉</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server master</span><br><span class="line">restrict master nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure><p>保存退出后先同步一下时间，再打开ntp服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ntpdate master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service ntpd start</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chkconfig ntpd on</span></span><br></pre></td></tr></table></figure><h1 id="6、安装jdk，从oracle下载1-7u80下载"><a href="#6、安装jdk，从oracle下载1-7u80下载" class="headerlink" title="6、安装jdk，从oracle下载1.7u80下载"></a>6、安装jdk，从oracle下载1.7u80下载</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh jdk-7u80-linux-x64.rpm</span></span><br></pre></td></tr></table></figure><p>修改profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/profile</span></span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/default</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><p>立即应用一下profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><h1 id="7、下载CDH并部署"><a href="#7、下载CDH并部署" class="headerlink" title="7、下载CDH并部署"></a>7、下载CDH并部署</h1><p>下载压缩包：<code>http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.7.0_x86_64.tar.gz</code> 并解压:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xzvf cloudera-manager-el6-cm5.7.0_x86_64.tar.gz</span></span><br></pre></td></tr></table></figure><p>把解压后的文件夹拷贝至 <code>/opt/cloudera/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv cloudera cm-5.7.0 /opt/</span></span><br></pre></td></tr></table></figure><p>下载三个文件：<code>http://archive.cloudera.com/cdh5/parcels/5.7.0/</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CDH</span>-<span class="number">5</span>.<span class="number">7</span>.<span class="number">0</span>-<span class="number">1</span>.cdh<span class="number">5</span>.<span class="number">7</span>.<span class="number">0</span>.p<span class="number">0</span>.<span class="number">45</span>-el<span class="number">6</span>.parcel</span><br><span class="line"><span class="attribute">CDH</span>-<span class="number">5</span>.<span class="number">7</span>.<span class="number">0</span>-<span class="number">1</span>.cdh<span class="number">5</span>.<span class="number">7</span>.<span class="number">0</span>.p<span class="number">0</span>.<span class="number">45</span>-el<span class="number">6</span>.parcel.sha<span class="number">1</span></span><br><span class="line"><span class="attribute">manifest</span>.json</span><br></pre></td></tr></table></figure><p>下载后把 <code>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha1</code> 重命名为 <code>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha</code></p><p>再把三个文件拷到/opt/cloudera/parcel-repo/目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp CDH-5.7.0-1.cdh5.7.0.p0.45-el6* manifest.json /opt/cloudera/parcel-repo/</span></span><br></pre></td></tr></table></figure><p>我们把CM管理控制台安装在主节点，在master机器上操作<br>首先把mysql的JDBC驱动文件放到java的lib目录下，因为后面多次会用到，所以个人习惯感觉放这里好一些，<br>用winscp将 <code>mysql-connector-java-5.1.41-bin.jar</code> 放到 <code>/usr/java/default/lib/和/usr/java/default/jre/lib/</code><br>然后在cm管理台的文件夹下创建该驱动文件的链接，后面在别的组件里也会用到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/cm-5.7.0/share/cmf/lib/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln /usr/java/default/jre/lib/mysql-connector-java-5.1.41-bin.jar ./ -s</span></span><br></pre></td></tr></table></figure><p>然后初始化数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/cm-5.7.0/share/cmf/schema/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./scm_prepare_database.sh mysql cm -hmaster -uroot -pddssoft --scm-host master scm scm scm</span></span><br></pre></td></tr></table></figure><p>启动CM管理控制台服务端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /opt/cm-5.7.0/etc/init.d/cloudera-scm-server start</span></span><br></pre></td></tr></table></figure><p>在所有机器上进行Agent配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useradd --system --home=/opt/cm-5.7.0/run/cloudera-scm-server/ --no-create-home --shell=/bin/<span class="literal">false</span> --comment <span class="string">&quot;Cloudera SCM User&quot;</span> cloudera-scm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /opt/cm-5.7.0/etc/cloudera-scm-agent/config.ini</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> server_host=master</span></span><br></pre></td></tr></table></figure><p>创建运行目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /opt/cm-5.7.0/run/cloudera-scm-agent</span></span><br></pre></td></tr></table></figure><p>启动每台机器上的Agent</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /opt/cm-5.7.0/etc/init.d/cloudera-scm-agent start</span></span><br></pre></td></tr></table></figure><p>在每台机器上配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 10 &gt; /proc/sys/vm/swappiness</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -w vm.swappiness=10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span></span><br></pre></td></tr></table></figure><p>修改 <code>/etc/rc.local</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/rc.local</span></span><br></pre></td></tr></table></figure><p>在最底下添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure><h1 id="8、通过浏览器进行安装"><a href="#8、通过浏览器进行安装" class="headerlink" title="8、通过浏览器进行安装"></a>8、通过浏览器进行安装</h1><ul><li><p>登录地址：<br><a href="http://master1:7180/%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE">http://master1:7180/进行安装配置</a></p></li><li><p>在选择Hosts界面上，输入机器名：<code>master1,master2,node1,node2,node3,node4,node5</code></p></li><li><p>在接下来选择版本的界面上，一定要选 <code>CDH-5.7.0-1.cdh5.7.0.p0.45</code>，其它都默认，如果选错版本后面又要进入漫长的重新下载过程</p></li><li><p>JDK不要勾，我们已经安装过了</p></li><li><p>后面一路默认，在 <code>Provide SSH login credentials.</code> 界面输入root登录密码</p></li></ul><p>在安装hive和oozie的过程中，需要输入mysql数据库信息，这时候检查数据库连接会不成功，需要单独处理一下mysql jdbc驱动。</p><p>hive 数据库驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/cloudera/parcels/CDH-5.7.0-1.cdh5.7.0.p0.45/lib/hive/lib</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln /usr/java/default/lib/mysql-connector-java-5.1.41-bin.jar ./ -s</span></span><br></pre></td></tr></table></figure><p>oozie 数据库驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp mysql-connector-java-5.1.41-bin.jar /usr/share/java/mysql-connector-java.jar</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> CDH </tag>
            
            <tag> Hadoop </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
